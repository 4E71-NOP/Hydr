
[J]
[T2B]Les variables et le calcul[T2][BR]
Nous allons faire un petit programme de conversion qui va nous permettre de calculer le co&ucirc;t d'un kilom&eacute;trage par exemple. Ce genre d'application est assez simple. Il s'agit en g&eacute;n&eacute;ral d'une fonction affine de type f(x)= a . x + b.[BR]
[BR]
Ici nous allons dire qu'un kilom&egrave;tre co&ucirc;te 2 francs et que l'on veut calculer le co&ucirc;t sur une distance de 300 kilom&egrave;tres. Accessoirement nous allons afficher le co&ucirc;t du kilom&eacute;trage que pour des intervalles de 20 kilom&egrave;tres.[BR]
[BR]
Voyons le programme.[BR]
[BR]
[BR]
[HR]
[CODE]
#include &lt;stdio.h&gt;[BR]
/* Affiche d'une fonction f(x)=a.x+b avec b=0 */[BR]
main()[BR]
{[BR]
[TAB]int nbr_km, cout_km, cout_distance;[BR]
[TAB]int mini, maxi, intervalle;[BR]
[BR]
[TAB]mini = 0;[BR]
[TAB]maxi = 300;[BR]
[TAB]intervalle = 20;[BR]
[TAB]nbr_km = mini;[BR]
[TAB]cout_km = 2;[BR]
[BR]
[TAB]while (nbr_km &lt;= maxi ) {[BR]
[TAB][TAB]cout_distance = nbr_km * cout_km;[BR]
[TAB][TAB]printf (\"%d km | %d frs\n\", nbr_km, cout_distance);[BR]
[TAB][TAB]nbr_km = nbr_km + intervalle;[BR]
[TAB]}[BR]
}[BR]
[/CODE]
[HR]
[BR]
[BR]
On passera les op&eacute;ration de compilations que vous devez maintenant conna&icirc;tre. Le source en lui meme est simple. Le but n'est pas de faire un ersatz de 'hello world' mais d'initier &agrave; la notion de boucle et de calcul et d'affichage de variables.[BR]
[BR]
[B]Int nom,nom,nom;[/B][BR]
Cette instruction sert a d&eacute;finir une variable. Une variable est un emplacement m&eacute;moire de diff&eacute;rentes dimensions possibles dans lequel on pourra stocker des donn&eacute;es. Ceci s'oppose &agrave; la d&eacute;finition de constante.[BR]
[BR]
Il existe plusieurs type de variables.[BR]
[BR]
-Char : caract&egrave;re (un seul octet)[BR]
-Short : nombre entier court[BR]
-Int : nombre entier[BR]
-Long : nombre entier long[BR]
-Float : nombre a virgule flottante[BR]
-Double : nombre a virgule flottante en double pr&eacute;cision[BR]
[BR]
Tout ces type fondamentaux sont d&eacute;di&eacute;s &agrave; un type d'utilisation donn&eacute;.[BR]
[BR]
[B]Nom = n ;[/B][BR]
Le programme d&eacute;bute par l'affectation de valeurs aux variables d&eacute;clar&eacute;es plus haut.La syntaxe est assez simple et pratiquement math&eacute;matique.[BR]
[BR]
Ici on defini les variables utilis&eacute;es dans la boucle 'while'.[BR]
[BR]
[B]while (nbr_km &lt;= maxi ) {[/B][BR]
Cette instruction d&eacute;fini le d&eacute;but d'une boucle. Une boucle fonctionne de la mani&egrave;re suivante :[BR]
-Evaluation de la condition entre parenth&egrave;ses.[BR]
Deux cas possible vrai/faux.[BR]
Cas vrai : Execution des instructions comprises entre accolades.[BR]
Cas faux : la boucle se termine et le programme reprends la suite des op&eacute;ration.[BR]
[BR]
Cette fonctionnalit&eacute; du C va nous permettre de traiter la fonction (ax+b) sur ces diff&eacute;rentes valeurs. Il existe d'autres type de boucles que nous verrons dans un autre chapitre. Ici nous n'aurons besoin que de l'instruction 'while'.[BR]
[BR]
[B]Nom = nom * n ;[/B][BR]
Il est possible d'affecter des r&eacute;sultats d'op&eacute;ration &agrave; une variable. Ceci est l'un des atouts au service de la puissance syntaxique du C. On peut aussi utiliser une fonction pour une affectation. Ex : nom = sin(x) + 10; Vous pourrez constater que cette possibilit&eacute; sera des plus utiles lors de vos futurs d&eacute;veloppements.[BR]
[BR]
Dans cet exemple nous avons la fonction affine: ''cout_distance = nbr_km * cout_km;'' que nous traduisons de mani&egrave;re g&eacute;n&eacute;rique par ''f(x) = x * a (avec b = 0)''.[BR]
[BR]
Il n'y a plus qu'a afficher le r&eacute;sultat.[BR]
[BR]
La fonction 'printf' &agrave; d&eacute;j&agrave; &eacute;t&eacute; vue au chapitre pr&eacute;c&eacute;dent. Le syst&egrave;me d'affichage de cet exemple est le m&ecirc;me.[BR]
[BR]
[B]nbr_km = nbr_km + intervalle;[/B][BR]
Cette it&eacute;ration repr&eacute;sente l'incr&eacute;ment de 'nbr_km' par lui m&ecirc;me &agrave; qui on ajoute une valeur. Donc cela donne la traduction suivante. Calcul de la somme de 'nbr_km' et de 'intervalle' que l'on stocke dans 'nbr_km'. Il existe d'autre syntaxe possible pour incr&eacute;menter une variable mais ici nous mettons l'accent sur la simplicit&eacute; de lecture.[BR]
[BR]
Ici l'affectation d'une valeur a 'nbr_km' n'est pas seulement le propos. Nous rappelons que le C est un langage &eacute;volu&eacute; mais il ne fait pas le m&eacute;nage ni la vaisselle. Dans une boucle dont le cycle est d&eacute;fini autour d'une condition pr&eacute;cise. Il ne faut pas oublier que cette condition doit passer d'un &eacute;tat vrai &agrave; faux (ou l'inverse) pour permettre au programme de sortir de la boucle et de continuer. Sans quoi il se produira une boucle, qui boucle, qui boucle, qui boucle... et votre programme part en vrille. Ceci peut aussi &ecirc;tre dommageable au syst&egrave;me si on utilise des fonctions qui travaillent plus en profondeur au sein dudit syst&egrave;me.[BR]
[BR]
Le programmeur C doit &eacute;viter ce genre d'erreur par un peu de rigueur et de m&eacute;thode.
[/J]
