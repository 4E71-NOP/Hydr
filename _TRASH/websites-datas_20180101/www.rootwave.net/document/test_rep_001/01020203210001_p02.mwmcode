
[J]
[T2B]Hello World[T2][BR]
Il s'entend bien &eacute;videmment que ces programmes d'exemple auront plus de chance de fonctionner sur des plates-formes UniX sachant qu'il ont &eacute;t&eacute; d&eacute;velopp&eacute;s et test&eacute;s sur ces plates-formes. Un minimum de connaissances Unix seront n&eacute;cessaires (utiliser un shell etc.). Pour d'autre syst&egrave;mes se r&eacute;f&eacute;rer aux documents de programmation idoines (ou &agrave; un sp&eacute;cialiste) de leur syst&egrave;me.[BR]
[BR]
Affichage de 'Hello world'. Le programme est relativement simple. Le m&eacute;canisme g&eacute;n&eacute;r&eacute; par ce programme au sein du syst&egrave;me l'est un peu moins. Mais nous n'entrerons pas dans les d&eacute;tails ici. Prenez un &eacute;diteur de texte (ex : vi ou emacs) et recopiez le script ci dessous.[BR]
[BR]
[HR]
[BR]
[CODE]
/* Affichage du texte 'hello world' vers la sortie standard */[BR]
[BR]
#include &lt;stdio.h&gt;[BR]
main ()[BR]
{[BR]
[TAB][TAB]printf (\"Hello world ! \\n\");[BR]
}[BR]
[BR]
[/CODE]
[HR]
Sauvegardez ce texte dans un fichier (ex : hello.c) et compilez le (cc hello.c ou gcc suivant les plates-formes). Vous obtenez un fichier 'a.out' dans le r&eacute;pertoire courant.[BR]
[BR]
Utilisez votre shell pour lancer le programme obtenu avec la commande suivante.[BR]
[BR]
[CODE]
root@home dir &gt; ./a.out[BR]
[/CODE]
[BR]
Ceci affichera dans la fen&ecirc;tre de votre terminal la phrase 'hello world'. Ok jusque la Ã§a a l'air simplet. Passons &agrave; l'&eacute;tude du source de ce programme.[BR]
[BR]
Ce programme se caract&eacute;rise pas sa simplicit&eacute; de lecture mais il pose les bases de l'articulation g&eacute;n&eacute;ral du langage C.[BR]
[BR]
[B]#include &lt;stdio.h&gt;[/B][BR]
Ceci indique au compilateur d'inclure les informations de la librairie 'stdio.h' (Standart In-Out). Nous d&eacute;crirons cette librairie dans un autre chapitre. Globalement elle permet de d&eacute;finir, g&eacute;rer et ou canaliser les flux de donn&eacute;es r&eacute;sultant d'un programme vers les entr&eacute;es / sorties disponibles (ex : STDOUT qui est la sortie standard).[BR]
[BR]
[B]main ()[/B][BR]
C'est la fonction principale du programme. Une image de ce qu'est 'main()' par rapport &agrave; l'ensemble du programme est ce qu'est un tronc pour un arbre. Le langage C &eacute;tant fonctionnel le tronc du programme n'&eacute;chappe pas a la r&egrave;gle en &eacute;tant une fonction appel&eacute;e par votre shell. Libre au programmeur d'appeler d'autres fonctions depuis 'main()' elle seront simplement assujetties &agrave; 'main()'. Nous verrons plus loin l'imbrication des fonctions.[BR]
[BR]
La fonction 'main()' s'articule de la mani&egrave;re suivante.[BR]
[BR]
[CODE]
Nom ()[BR]
{[BR]
[TAB][TAB]it&eacute;ration ;[BR]
}[BR]
[/CODE]
[BR]
-Les parenth&egrave;ses apr&egrave;s 'Nom' servent a transmettre les arguments &agrave; la fonction appel&eacute;e. Ici et dans ce cas 'main()' n'en a pas besoin.[BR]
-Les instructions qui composent une fonction figurent entre accolades { }.[BR]
-Chaque instruction se termine par un point-virgule ; .[BR]
[BR]
[B]printf (\"Hello world ! \n\");[/B][BR]
'printf' est une fonction. Le param&egrave;tre qui lui est pass&eacute; est l'expression 'Hello world ! \n'. On appelle une fonction par son nom, suivit d'une liste d'arguments entre parenth&egrave;ses. L'expression entre guillemets pass&eacute;e &agrave; la fonction 'printf' s'appelle 'une cha&icirc;ne de caract&egrave;res' (ou character string) et est de type 'char'. La s&eacute;quence '\n' est un caract&egrave;re de contr&ocirc;le permettant le passage &agrave; la ligne suivante (n comme newline). On remarquera que si cette s&eacute;quence est omise on n'a pas de retour &agrave; la ligne mais surtout que cela permet de construire des phrases au pas &agrave; pas. Ceci pourra &ecirc;tre utile pour de futurs d&eacute;veloppements qui imposeront d'afficher un r&eacute;sultat en fonction de param&egrave;tres variables.[BR]
[BR]
En revanche on ne peut pas &eacute;crire : [BR]
[CODE]
printf (\"Hello world ![BR]
\");[BR]
[/CODE]
[BR]
Le compilateur C ne sait pas passer &agrave; la ligne automatiquement et produira un message d'erreur lors de la compilation.[BR]
[BR]
Maintenant on pourrait aussi bien &eacute;crire le premier programme de la mani&egrave;re suivante:[BR]
[BR]
[HR]
[CODE]
/* Affichage du texte 'hello world' vers la sortie standard */[BR]
[BR]
#include &lt;stdio.h&gt;[BR]
main ()[BR]
{[BR]
[TAB][TAB]printf (\"Hello \");[BR]
[TAB][TAB]printf (\"world ! \");[BR]
[TAB][TAB]printf (\"\n\");[BR]
}[BR]
[/CODE]
[HR]
[BR]
Et il produirait un r&eacute;sultat identique au premier programme.[BR]
[BR]
Remarquez que la s&eacute;quence '\n' est cod&eacute;e sur un seul caract&egrave;re dans la cha&icirc;ne lors de la compilation. Cette s&eacute;quence fait partie de ce que l'on appelle les s&eacute;quences d'&eacute;chappement (escape sequence ou escape characters) qui permettent de repr&eacute;senter des caract&egrave;res non imprimable du fait de leur nullit&eacute; calligraphique (retour chariot) ou des caract&egrave;res difficiles a taper. Ce m&eacute;canisme est extensible &agrave; d'autres utilisations.[BR]
[BR]
Voil&agrave; ! Avec un programme de quelques lignes on a pu appr&eacute;hender l'articulation syntaxique du langage C. Bien sur les diff&eacute;rents sujet abord&eacute;s ici (fonctions, type de donn&eacute;es, librairie, etc.) seront approfondis dans les chapitres suivants.
[/J]
